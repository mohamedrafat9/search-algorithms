from dataSet import*
def totalCost(path):
    lastnode=path[-1][0]
    return sum(cost for _ , cost in path) + heuristics[lastnode]

def a_star(start,goal):
    pqueue=[[(start,0)]]
    visited={}
    while pqueue:
        pqueue.sort(key=totalCost)
        path=pqueue.pop(0)
        node=path[-1][0]
        cost=totalCost(path)

        if node in visited and visited[node] <= cost:
            continue
        visited[node] = cost

        if node == goal:
            return path
        
        for (neighbor , edgecost) in graph.get(node,[]):
            new_path = path.copy()
            new_path.append((neighbor , edgecost))
            pqueue.append(new_path)
    return None

sol=a_star('A','G')
fcost =totalCost(sol)
print(f"path is {sol} and its cost is {fcost}")
